// Generated by gencpp from file ersow_comm/data_agent1.msg
// DO NOT EDIT!


#ifndef ERSOW_COMM_MESSAGE_DATA_AGENT1_H
#define ERSOW_COMM_MESSAGE_DATA_AGENT1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ersow_comm
{
template <class ContainerAllocator>
struct data_agent1_
{
  typedef data_agent1_<ContainerAllocator> Type;

  data_agent1_()
    : agent1_value(0)
    , agent1_posx(0)
    , agent1_posy(0)
    , agent1_post(0)
    , agent1_ballx(0)
    , agent1_bally(0)
    , agent1_ball_detected(0)
    , agent1_pass(0)
    , agent1_condition(0)  {
    }
  data_agent1_(const ContainerAllocator& _alloc)
    : agent1_value(0)
    , agent1_posx(0)
    , agent1_posy(0)
    , agent1_post(0)
    , agent1_ballx(0)
    , agent1_bally(0)
    , agent1_ball_detected(0)
    , agent1_pass(0)
    , agent1_condition(0)  {
  (void)_alloc;
    }



   typedef int32_t _agent1_value_type;
  _agent1_value_type agent1_value;

   typedef uint16_t _agent1_posx_type;
  _agent1_posx_type agent1_posx;

   typedef uint16_t _agent1_posy_type;
  _agent1_posy_type agent1_posy;

   typedef uint16_t _agent1_post_type;
  _agent1_post_type agent1_post;

   typedef uint16_t _agent1_ballx_type;
  _agent1_ballx_type agent1_ballx;

   typedef uint16_t _agent1_bally_type;
  _agent1_bally_type agent1_bally;

   typedef uint16_t _agent1_ball_detected_type;
  _agent1_ball_detected_type agent1_ball_detected;

   typedef uint8_t _agent1_pass_type;
  _agent1_pass_type agent1_pass;

   typedef uint8_t _agent1_condition_type;
  _agent1_condition_type agent1_condition;





  typedef boost::shared_ptr< ::ersow_comm::data_agent1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ersow_comm::data_agent1_<ContainerAllocator> const> ConstPtr;

}; // struct data_agent1_

typedef ::ersow_comm::data_agent1_<std::allocator<void> > data_agent1;

typedef boost::shared_ptr< ::ersow_comm::data_agent1 > data_agent1Ptr;
typedef boost::shared_ptr< ::ersow_comm::data_agent1 const> data_agent1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ersow_comm::data_agent1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ersow_comm::data_agent1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ersow_comm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ersow_comm': ['/home/khoirlnwar/COMM_workspace/src/ersow_comm/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ersow_comm::data_agent1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ersow_comm::data_agent1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ersow_comm::data_agent1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ersow_comm::data_agent1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ersow_comm::data_agent1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ersow_comm::data_agent1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ersow_comm::data_agent1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "022256aa1a3bdbeeb5a7d45acc3c370c";
  }

  static const char* value(const ::ersow_comm::data_agent1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x022256aa1a3bdbeeULL;
  static const uint64_t static_value2 = 0xb5a7d45acc3c370cULL;
};

template<class ContainerAllocator>
struct DataType< ::ersow_comm::data_agent1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ersow_comm/data_agent1";
  }

  static const char* value(const ::ersow_comm::data_agent1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ersow_comm::data_agent1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 agent1_value\n\
\n\
uint16 agent1_posx\n\
uint16 agent1_posy\n\
uint16 agent1_post\n\
\n\
uint16 agent1_ballx\n\
uint16 agent1_bally\n\
uint16 agent1_ball_detected\n\
\n\
uint8 agent1_pass\n\
uint8 agent1_condition\n\
";
  }

  static const char* value(const ::ersow_comm::data_agent1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ersow_comm::data_agent1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agent1_value);
      stream.next(m.agent1_posx);
      stream.next(m.agent1_posy);
      stream.next(m.agent1_post);
      stream.next(m.agent1_ballx);
      stream.next(m.agent1_bally);
      stream.next(m.agent1_ball_detected);
      stream.next(m.agent1_pass);
      stream.next(m.agent1_condition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_agent1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ersow_comm::data_agent1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ersow_comm::data_agent1_<ContainerAllocator>& v)
  {
    s << indent << "agent1_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.agent1_value);
    s << indent << "agent1_posx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_posx);
    s << indent << "agent1_posy: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_posy);
    s << indent << "agent1_post: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_post);
    s << indent << "agent1_ballx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_ballx);
    s << indent << "agent1_bally: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_bally);
    s << indent << "agent1_ball_detected: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agent1_ball_detected);
    s << indent << "agent1_pass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agent1_pass);
    s << indent << "agent1_condition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agent1_condition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERSOW_COMM_MESSAGE_DATA_AGENT1_H
