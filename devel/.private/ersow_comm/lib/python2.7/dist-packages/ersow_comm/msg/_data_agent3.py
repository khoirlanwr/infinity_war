# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ersow_comm/data_agent3.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class data_agent3(genpy.Message):
  _md5sum = "4236bf70894c8b40f3eee3b69d67749c"
  _type = "ersow_comm/data_agent3"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 agent3_value

uint16 agent3_posx
uint16 agent3_posy
uint16 agent3_post

uint16 agent3_ballx
uint16 agent3_bally
uint16 agent3_ball_detected

uint8 agent3_pass
uint8 agent3_condition"""
  __slots__ = ['agent3_value','agent3_posx','agent3_posy','agent3_post','agent3_ballx','agent3_bally','agent3_ball_detected','agent3_pass','agent3_condition']
  _slot_types = ['int32','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agent3_value,agent3_posx,agent3_posy,agent3_post,agent3_ballx,agent3_bally,agent3_ball_detected,agent3_pass,agent3_condition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(data_agent3, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agent3_value is None:
        self.agent3_value = 0
      if self.agent3_posx is None:
        self.agent3_posx = 0
      if self.agent3_posy is None:
        self.agent3_posy = 0
      if self.agent3_post is None:
        self.agent3_post = 0
      if self.agent3_ballx is None:
        self.agent3_ballx = 0
      if self.agent3_bally is None:
        self.agent3_bally = 0
      if self.agent3_ball_detected is None:
        self.agent3_ball_detected = 0
      if self.agent3_pass is None:
        self.agent3_pass = 0
      if self.agent3_condition is None:
        self.agent3_condition = 0
    else:
      self.agent3_value = 0
      self.agent3_posx = 0
      self.agent3_posy = 0
      self.agent3_post = 0
      self.agent3_ballx = 0
      self.agent3_bally = 0
      self.agent3_ball_detected = 0
      self.agent3_pass = 0
      self.agent3_condition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6H2B().pack(_x.agent3_value, _x.agent3_posx, _x.agent3_posy, _x.agent3_post, _x.agent3_ballx, _x.agent3_bally, _x.agent3_ball_detected, _x.agent3_pass, _x.agent3_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.agent3_value, _x.agent3_posx, _x.agent3_posy, _x.agent3_post, _x.agent3_ballx, _x.agent3_bally, _x.agent3_ball_detected, _x.agent3_pass, _x.agent3_condition,) = _get_struct_i6H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6H2B().pack(_x.agent3_value, _x.agent3_posx, _x.agent3_posy, _x.agent3_post, _x.agent3_ballx, _x.agent3_bally, _x.agent3_ball_detected, _x.agent3_pass, _x.agent3_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.agent3_value, _x.agent3_posx, _x.agent3_posy, _x.agent3_post, _x.agent3_ballx, _x.agent3_bally, _x.agent3_ball_detected, _x.agent3_pass, _x.agent3_condition,) = _get_struct_i6H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i6H2B = None
def _get_struct_i6H2B():
    global _struct_i6H2B
    if _struct_i6H2B is None:
        _struct_i6H2B = struct.Struct("<i6H2B")
    return _struct_i6H2B
