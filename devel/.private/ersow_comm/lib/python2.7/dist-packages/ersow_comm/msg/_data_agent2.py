# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ersow_comm/data_agent2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class data_agent2(genpy.Message):
  _md5sum = "75da7416470ab6003bdb7cff78be02a4"
  _type = "ersow_comm/data_agent2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 agent2_value

uint16 agent2_posx
uint16 agent2_posy
uint16 agent2_post

uint16 agent2_ballx
uint16 agent2_bally
uint16 agent2_ball_detected

uint8 agent2_pass
uint8 agent2_condition"""
  __slots__ = ['agent2_value','agent2_posx','agent2_posy','agent2_post','agent2_ballx','agent2_bally','agent2_ball_detected','agent2_pass','agent2_condition']
  _slot_types = ['int32','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agent2_value,agent2_posx,agent2_posy,agent2_post,agent2_ballx,agent2_bally,agent2_ball_detected,agent2_pass,agent2_condition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(data_agent2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agent2_value is None:
        self.agent2_value = 0
      if self.agent2_posx is None:
        self.agent2_posx = 0
      if self.agent2_posy is None:
        self.agent2_posy = 0
      if self.agent2_post is None:
        self.agent2_post = 0
      if self.agent2_ballx is None:
        self.agent2_ballx = 0
      if self.agent2_bally is None:
        self.agent2_bally = 0
      if self.agent2_ball_detected is None:
        self.agent2_ball_detected = 0
      if self.agent2_pass is None:
        self.agent2_pass = 0
      if self.agent2_condition is None:
        self.agent2_condition = 0
    else:
      self.agent2_value = 0
      self.agent2_posx = 0
      self.agent2_posy = 0
      self.agent2_post = 0
      self.agent2_ballx = 0
      self.agent2_bally = 0
      self.agent2_ball_detected = 0
      self.agent2_pass = 0
      self.agent2_condition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6H2B().pack(_x.agent2_value, _x.agent2_posx, _x.agent2_posy, _x.agent2_post, _x.agent2_ballx, _x.agent2_bally, _x.agent2_ball_detected, _x.agent2_pass, _x.agent2_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.agent2_value, _x.agent2_posx, _x.agent2_posy, _x.agent2_post, _x.agent2_ballx, _x.agent2_bally, _x.agent2_ball_detected, _x.agent2_pass, _x.agent2_condition,) = _get_struct_i6H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6H2B().pack(_x.agent2_value, _x.agent2_posx, _x.agent2_posy, _x.agent2_post, _x.agent2_ballx, _x.agent2_bally, _x.agent2_ball_detected, _x.agent2_pass, _x.agent2_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.agent2_value, _x.agent2_posx, _x.agent2_posy, _x.agent2_post, _x.agent2_ballx, _x.agent2_bally, _x.agent2_ball_detected, _x.agent2_pass, _x.agent2_condition,) = _get_struct_i6H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i6H2B = None
def _get_struct_i6H2B():
    global _struct_i6H2B
    if _struct_i6H2B is None:
        _struct_i6H2B = struct.Struct("<i6H2B")
    return _struct_i6H2B
