# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ersow_comm/data_agent0.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class data_agent0(genpy.Message):
  _md5sum = "392f246593b0cd645a002aefd8084841"
  _type = "ersow_comm/data_agent0"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 agent0_value

uint16 agent0_state_okto
uint16 agent0_mode_okto

uint16 agent0_state_hendro
uint16 agent0_mode_hendro

uint16 agent0_state_jamil
uint16 agent0_mode_jamil

uint16 agent0_targetx_okto
uint16 agent0_targety_okto
uint16 agent0_targett_okto

uint16 agent0_targetx_hendro
uint16 agent0_targety_hendro
uint16 agent0_targett_hendro

uint16 agent0_targetx_jamil
uint16 agent0_targety_jamil
uint16 agent0_targett_jamil

uint16 agent0_ballx
uint16 agent0_bally
uint16 agent0_ball_detected


uint16 agent0_localization_flag
uint16 agent0_localization_posx
uint16 agent0_localization_posy
uint16 agent0_localization_post

uint8 agent0_pass
uint8 agent0_condition"""
  __slots__ = ['agent0_value','agent0_state_okto','agent0_mode_okto','agent0_state_hendro','agent0_mode_hendro','agent0_state_jamil','agent0_mode_jamil','agent0_targetx_okto','agent0_targety_okto','agent0_targett_okto','agent0_targetx_hendro','agent0_targety_hendro','agent0_targett_hendro','agent0_targetx_jamil','agent0_targety_jamil','agent0_targett_jamil','agent0_ballx','agent0_bally','agent0_ball_detected','agent0_localization_flag','agent0_localization_posx','agent0_localization_posy','agent0_localization_post','agent0_pass','agent0_condition']
  _slot_types = ['int32','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agent0_value,agent0_state_okto,agent0_mode_okto,agent0_state_hendro,agent0_mode_hendro,agent0_state_jamil,agent0_mode_jamil,agent0_targetx_okto,agent0_targety_okto,agent0_targett_okto,agent0_targetx_hendro,agent0_targety_hendro,agent0_targett_hendro,agent0_targetx_jamil,agent0_targety_jamil,agent0_targett_jamil,agent0_ballx,agent0_bally,agent0_ball_detected,agent0_localization_flag,agent0_localization_posx,agent0_localization_posy,agent0_localization_post,agent0_pass,agent0_condition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(data_agent0, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agent0_value is None:
        self.agent0_value = 0
      if self.agent0_state_okto is None:
        self.agent0_state_okto = 0
      if self.agent0_mode_okto is None:
        self.agent0_mode_okto = 0
      if self.agent0_state_hendro is None:
        self.agent0_state_hendro = 0
      if self.agent0_mode_hendro is None:
        self.agent0_mode_hendro = 0
      if self.agent0_state_jamil is None:
        self.agent0_state_jamil = 0
      if self.agent0_mode_jamil is None:
        self.agent0_mode_jamil = 0
      if self.agent0_targetx_okto is None:
        self.agent0_targetx_okto = 0
      if self.agent0_targety_okto is None:
        self.agent0_targety_okto = 0
      if self.agent0_targett_okto is None:
        self.agent0_targett_okto = 0
      if self.agent0_targetx_hendro is None:
        self.agent0_targetx_hendro = 0
      if self.agent0_targety_hendro is None:
        self.agent0_targety_hendro = 0
      if self.agent0_targett_hendro is None:
        self.agent0_targett_hendro = 0
      if self.agent0_targetx_jamil is None:
        self.agent0_targetx_jamil = 0
      if self.agent0_targety_jamil is None:
        self.agent0_targety_jamil = 0
      if self.agent0_targett_jamil is None:
        self.agent0_targett_jamil = 0
      if self.agent0_ballx is None:
        self.agent0_ballx = 0
      if self.agent0_bally is None:
        self.agent0_bally = 0
      if self.agent0_ball_detected is None:
        self.agent0_ball_detected = 0
      if self.agent0_localization_flag is None:
        self.agent0_localization_flag = 0
      if self.agent0_localization_posx is None:
        self.agent0_localization_posx = 0
      if self.agent0_localization_posy is None:
        self.agent0_localization_posy = 0
      if self.agent0_localization_post is None:
        self.agent0_localization_post = 0
      if self.agent0_pass is None:
        self.agent0_pass = 0
      if self.agent0_condition is None:
        self.agent0_condition = 0
    else:
      self.agent0_value = 0
      self.agent0_state_okto = 0
      self.agent0_mode_okto = 0
      self.agent0_state_hendro = 0
      self.agent0_mode_hendro = 0
      self.agent0_state_jamil = 0
      self.agent0_mode_jamil = 0
      self.agent0_targetx_okto = 0
      self.agent0_targety_okto = 0
      self.agent0_targett_okto = 0
      self.agent0_targetx_hendro = 0
      self.agent0_targety_hendro = 0
      self.agent0_targett_hendro = 0
      self.agent0_targetx_jamil = 0
      self.agent0_targety_jamil = 0
      self.agent0_targett_jamil = 0
      self.agent0_ballx = 0
      self.agent0_bally = 0
      self.agent0_ball_detected = 0
      self.agent0_localization_flag = 0
      self.agent0_localization_posx = 0
      self.agent0_localization_posy = 0
      self.agent0_localization_post = 0
      self.agent0_pass = 0
      self.agent0_condition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i22H2B().pack(_x.agent0_value, _x.agent0_state_okto, _x.agent0_mode_okto, _x.agent0_state_hendro, _x.agent0_mode_hendro, _x.agent0_state_jamil, _x.agent0_mode_jamil, _x.agent0_targetx_okto, _x.agent0_targety_okto, _x.agent0_targett_okto, _x.agent0_targetx_hendro, _x.agent0_targety_hendro, _x.agent0_targett_hendro, _x.agent0_targetx_jamil, _x.agent0_targety_jamil, _x.agent0_targett_jamil, _x.agent0_ballx, _x.agent0_bally, _x.agent0_ball_detected, _x.agent0_localization_flag, _x.agent0_localization_posx, _x.agent0_localization_posy, _x.agent0_localization_post, _x.agent0_pass, _x.agent0_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.agent0_value, _x.agent0_state_okto, _x.agent0_mode_okto, _x.agent0_state_hendro, _x.agent0_mode_hendro, _x.agent0_state_jamil, _x.agent0_mode_jamil, _x.agent0_targetx_okto, _x.agent0_targety_okto, _x.agent0_targett_okto, _x.agent0_targetx_hendro, _x.agent0_targety_hendro, _x.agent0_targett_hendro, _x.agent0_targetx_jamil, _x.agent0_targety_jamil, _x.agent0_targett_jamil, _x.agent0_ballx, _x.agent0_bally, _x.agent0_ball_detected, _x.agent0_localization_flag, _x.agent0_localization_posx, _x.agent0_localization_posy, _x.agent0_localization_post, _x.agent0_pass, _x.agent0_condition,) = _get_struct_i22H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i22H2B().pack(_x.agent0_value, _x.agent0_state_okto, _x.agent0_mode_okto, _x.agent0_state_hendro, _x.agent0_mode_hendro, _x.agent0_state_jamil, _x.agent0_mode_jamil, _x.agent0_targetx_okto, _x.agent0_targety_okto, _x.agent0_targett_okto, _x.agent0_targetx_hendro, _x.agent0_targety_hendro, _x.agent0_targett_hendro, _x.agent0_targetx_jamil, _x.agent0_targety_jamil, _x.agent0_targett_jamil, _x.agent0_ballx, _x.agent0_bally, _x.agent0_ball_detected, _x.agent0_localization_flag, _x.agent0_localization_posx, _x.agent0_localization_posy, _x.agent0_localization_post, _x.agent0_pass, _x.agent0_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.agent0_value, _x.agent0_state_okto, _x.agent0_mode_okto, _x.agent0_state_hendro, _x.agent0_mode_hendro, _x.agent0_state_jamil, _x.agent0_mode_jamil, _x.agent0_targetx_okto, _x.agent0_targety_okto, _x.agent0_targett_okto, _x.agent0_targetx_hendro, _x.agent0_targety_hendro, _x.agent0_targett_hendro, _x.agent0_targetx_jamil, _x.agent0_targety_jamil, _x.agent0_targett_jamil, _x.agent0_ballx, _x.agent0_bally, _x.agent0_ball_detected, _x.agent0_localization_flag, _x.agent0_localization_posx, _x.agent0_localization_posy, _x.agent0_localization_post, _x.agent0_pass, _x.agent0_condition,) = _get_struct_i22H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i22H2B = None
def _get_struct_i22H2B():
    global _struct_i22H2B
    if _struct_i22H2B is None:
        _struct_i22H2B = struct.Struct("<i22H2B")
    return _struct_i22H2B
